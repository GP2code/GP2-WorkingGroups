##  STRling
##
##  This WDL implements workflow for STRling's (github.com/quinlan-lab/STRling) in joint calling mode to detect and genotype STRs then perform outlier testing
##  Check here for other paramters (https://github.com/quinlan-lab/STRling-nf/blob/main/main.nf)

version 1.0

struct RuntimeAttr {
  Float? mem_gb
  Int? cpu_cores
  Int? disk_gb
  Int? boot_disk_gb
  Int? preemptible_tries
  Int? max_retries
}

workflow strling_joint_call {
  input {
    Array[File] sample_strling_bins
    File reference_fasta
    File reference_fasta_index
    String? strling_docker_override
    String strling_docker = select_first([strling_docker_override, "quay.io/biocontainers/strling:0.5.2--hbbffb53_1"])
    String runtime_zones
    RuntimeAttr? runtime_attr_str_merge
    RuntimeAttr? runtime_attr_analysis
    
    Int? outlier_disk_size_override
    Int outlier_disk_size = select_first([outlier_disk_size_override, "100"])

  }
  
  parameter_meta {
    sample_strling_bins: "Individual bin files generated by STRling."
    sample_bam_or_cram: "bam or cram files to be used as input to STRling."
    sample_bam_or_cram_index: "[Optional] index files for the sample bam/cram. Files should be in the same order as the samples. If not provided, it will be inferred from sample filenames."
    reference_fasta: "Sets the path to the reference."
    reference_fasta_index: "[Optional] Sets the path to the index of reference. If not provided, it will be inferred from the reference filename."
    strling_docker: "Sets the docker image of STRling."
    runtime_attr_str_profile: "[Optional] Override the default runtime attributes for STR profiling task."
  }

  call prep_chr {
    input:
      reference_fasta_index = reference_fasta_index
  }

  Array[String] chrs = read_lines(prep_chr.chrs)

  # str merge per chr
  scatter (chr in chrs) {
    call str_merge {
      input:
        chr = chr, 
        ref_fasta = reference_fasta,
        ref_fasta_index = reference_fasta_index,
        bins = sample_strling_bins,
        runtime_zones = runtime_zones,
        strling_docker = strling_docker,
        runtime_attr_override = runtime_attr_str_merge      
    }  
  }

  call str_merge_collect {
    input: 
      bounds= str_merge.bounds
  }
  
  output {
    File bound = str_merge_collect.bounds
  }
}


#TASK DEFINITIONS
# prepare chromosome name
task prep_chr {
  input {
    # Command parameters
    File reference_fasta_index
  }

  output {
    File chrs = "chrs.txt"
  }

  command <<<
           
        cat ~{reference_fasta_index} | head -n 24 | awk '{print $1}' > chrs.txt
  
  >>>

  runtime {
    docker : "ubuntu:20.04"
    memory: "5 GB"
    cpu: 1
  }
}

task str_merge {
  input {
    File ref_fasta
    File ref_fasta_index
    Array[File] bins
    String chr
    String runtime_zones
    String strling_docker
    RuntimeAttr? runtime_attr_override
  }
  
  output {
    File bounds = "~{chr}-bounds.txt"
  }
  
  command <<<
    strling merge \
      -f ~{ref_fasta} \
      --chromosome ~{chr} \
      -o ~{chr} \
      ~{sep=' ' bins}
  >>>

  RuntimeAttr runtime_attr_str_merge_default = object {
    cpu_cores: 20,
    mem_gb: 120,
    boot_disk_gb: 20,
    preemptible_tries: 2,
    max_retries: 1,
    disk_gb: 20 + ceil(3*size([
      bins,
      ref_fasta], "GiB"))
  }
  
  RuntimeAttr runtime_attr = select_first([
    runtime_attr_override,
    runtime_attr_str_merge_default])

  runtime {
    docker: strling_docker
    cpu: runtime_attr.cpu_cores
    memory: runtime_attr.mem_gb + " GiB"
    disks: "local-disk " + runtime_attr.disk_gb + " HDD"
    bootDiskSizeGb: runtime_attr.boot_disk_gb
    preemptible: runtime_attr.preemptible_tries
    maxRetries: runtime_attr.max_retries
    zones: runtime_zones
  }
}

task str_merge_collect {
  input {
    Array[File] bounds
    RuntimeAttr? runtime_attr_override
  }
  
  Int disk_size = ceil(size(bounds,"GB") + 20)
  
  output {
    File bounds = "strling-bounds.txt"
  }
  
  command <<<
       awk 'NR == FNR || FNR > 1' ~{sep=' ' bounds} > strling-bounds.txt
  >>>

  runtime {
    docker : "ubuntu:20.04"
    memory: "5 GB"
    cpu: 1
    disks: "local-disk " + disk_size + " HDD"
  }
}
