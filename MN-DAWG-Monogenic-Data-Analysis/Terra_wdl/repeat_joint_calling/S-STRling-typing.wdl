##  STRling
##
##  This WDL implements workflow for STRling's (github.com/quinlan-lab/STRling) in joint calling mode to detect and genotype STRs then perform outlier testing
##  Check here for other paramters (https://github.com/quinlan-lab/STRling-nf/blob/main/main.nf)

version 1.0

struct RuntimeAttr {
  Float? mem_gb
  Int? cpu_cores
  Int? disk_gb
  Int? boot_disk_gb
  Int? preemptible_tries
  Int? max_retries
}

workflow strling_joint_call {
  input {
    String sample_id
    File sample_strling_bin
    File sample_bams_or_crams
    File sample_bams_or_crams_index
    File reference_fasta
    File reference_fasta_index
    File strling_bound
    String? strling_docker_override
    String strling_docker = select_first([strling_docker_override, "quay.io/biocontainers/strling:0.5.2--hbbffb53_1"])
    String runtime_zones
    RuntimeAttr? runtime_attr_str_merge
    RuntimeAttr? runtime_attr_analysis
    
    Int? outlier_disk_size_override
    Int outlier_disk_size = select_first([outlier_disk_size_override, "100"])

  }
  
  parameter_meta {
    sample_strling_bins: "Individual bin files generated by STRling."
    sample_bam_or_cram: "bam or cram files to be used as input to STRling."
    sample_bam_or_cram_index: "[Optional] index files for the sample bam/cram. Files should be in the same order as the samples. If not provided, it will be inferred from sample filenames."
    reference_fasta: "Sets the path to the reference."
    reference_fasta_index: "[Optional] Sets the path to the index of reference. If not provided, it will be inferred from the reference filename."
    strling_docker: "Sets the docker image of STRling."
    runtime_attr_str_profile: "[Optional] Override the default runtime attributes for STR profiling task."
  }

  call str_call_joint {
    input:
      ref_fasta = reference_fasta,
      ref_fasta_index = reference_fasta_index,
      bounds = strling_bound,
      sampleID = sample_id,
      cram = sample_bams_or_crams,
      crai = sample_bams_or_crams_index,
      bin = sample_strling_bin,
      runtime_zones = runtime_zones,
      strling_docker = strling_docker,
      runtime_attr_override = runtime_attr_analysis
  }
  
  output {
    File bounds = str_call_joint.output_bounds
    File unplaced = str_call_joint.output_unplaced
    File genotype = str_call_joint.output_genotype
  }
}


#TASK DEFINITIONS
task str_call_joint {
  input {
    File ref_fasta
    File ref_fasta_index
    File cram
    File bin
    File crai
    String sampleID
    File bounds
    String strling_docker
    String runtime_zones
    RuntimeAttr? runtime_attr_override
  }

  output {
    File output_bounds = "~{sampleID}-bounds.txt"
    File output_unplaced = "~{sampleID}-unplaced.txt"
    File output_genotype = "~{sampleID}-genotype.txt"
  }
  
  command <<<
  
    strling call \
      -f ~{ref_fasta} \
      -b ~{bounds} \
      -o ~{sampleID} \
      ~{cram} \
      ~{bin}
  >>>

  RuntimeAttr runtime_attr_str_call_default = object {
    cpu_cores: 1,
    mem_gb: 8,
    boot_disk_gb: 20,
    preemptible_tries: 2,
    max_retries: 1,
    disk_gb: 20 + ceil(size([
      cram,
      crai,
      ref_fasta], "GiB"))
  }
  
  RuntimeAttr runtime_attr = select_first([
    runtime_attr_override,
    runtime_attr_str_call_default])

  runtime {
    docker: strling_docker
    cpu: runtime_attr.cpu_cores
    memory: runtime_attr.mem_gb + " GiB"
    disks: "local-disk " + runtime_attr.disk_gb + " HDD"
    bootDiskSizeGb: runtime_attr.boot_disk_gb
    preemptible: runtime_attr.preemptible_tries
    maxRetries: runtime_attr.max_retries
    zones: runtime_zones
  }
}